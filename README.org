#+STARTUP: show3levels
#+PROPERTY: header-args :tangle init.el

* Sanemacs
** Preamble
:PROPERTIES:
:Sanemacs version: 0.4.0
:Website: https://sanemacs.com
:END:

:INFO:
A minimal Emacs config that does just enough and nothing more.
Sanemacs sets up a variety of tasteful defaults, MELPA, use-package, and undo-tree to provide for a great out-of-the-box Emacs experience.

- *Performance Tuning*:
  - Adjusts garbage collection thresholds for improved performance.
  - Increases the maximum read process output.

- *UI Customization*:
  - Disables the menu bar, tool bar, and scroll bar for a distraction-free interface.

- *Bug Fix*:
  - Addresses a bug related to GNU archive download for specific Emacs versions.

- *Package Management*:
  - Configures package.el and sets up the use-package package if not already installed.

- *Useful Defaults*:
  - Sets various default behaviors and configurations for a more streamlined Emacs experience.

- *Keybindings*:
  - Defines custom keybindings for specific actions.

- *Customization File*:
  - Manages the custom-set-variables in a separate file for better organization.

- *File Management*:
  - Specifies the location for auto-save and backup files.

- *Theme*:
  - Loads the "wheatgrass" theme if no custom themes are enabled.

- *Configuration Reloading*:
  - Defines a function to reload the Emacs configuration.
:END:
** Early init
*** Header
#+begin_src elisp :tangle early-init.el
  ;;; Do not edit this file!
  ;;; Make changes in README.org
#+end_src
*** For performance
:INFO:
Code for optimizing the garbage collection threshold and the maximum amount of data to read from a process in Emacs. The `gc-cons-threshold` variable sets the threshold for garbage collection, and the `read-process-output-max` variable sets the maximum amount of data to read from a process. Here's a breakdown of the code:

- The first line sets the `gc-cons-threshold` to 100,000,000, which means the garbage collection will be triggered after allocating this amount of memory.
- The second line sets the `read-process-output-max` to 1,048,576 bytes, which is 1MB.
- The `add-hook` function adds a hook to run the given function after Emacs has finished initializing. In this case, it sets the `gc-cons-threshold` to 800,000 after initialization.

The `gc-cons-threshold` is the number of bytes of memory allocation before a garbage collection is invoked. Setting it to a higher value can improve performance during startup, but it may lead to longer pauses during regular use[4]. The `read-process-output-max` variable sets the maximum amount of data to read from a process, and increasing it can be useful for improving the performance of certain Emacs packages.

The provided code is a common optimization technique for Emacs initialization to balance startup performance and memory management. It sets a higher garbage collection threshold during startup and then restores it to a lower value after initialization to improve overall performance.
:END:
#+begin_src elisp :tangle early-init.el
  (setq gc-cons-threshold 100000000)
  (setq read-process-output-max (* 1024 1024)) ;; 1mb

  (add-hook 'after-init-hook #'(lambda ()
				 ;; restore after startup
				 (setq gc-cons-threshold 800000)))
#+end_src
*** Disable menu-bar, tool-bar, and scroll-bar
#+begin_src elisp :tangle early-init.el
  (if (fboundp 'menu-bar-mode)
      (menu-bar-mode -1))
  (if (fboundp 'tool-bar-mode)
      (tool-bar-mode -1))
  (if (fboundp 'scroll-bar-mode)
      (scroll-bar-mode -1))
#+end_src
*** Theme
#+begin_src elisp :tangle early-init.el
  (if (not custom-enabled-themes)
      (load-theme 'wheatgrass t))
#+end_src
*** Fix [[https://www.reddit.com/r/emacs/comments/cueoug/the_failed_to_download_gnu_archive_is_a_pretty/][bug]]
#+begin_src elisp :tangle early-init.el
  (when (version< emacs-version "26.3")
    (setq gnutls-algorithm-priority "NORMAL:-VERS-TLS1.3"))
#+end_src
** Init
*** Header
#+begin_src elisp
  ;;; Do not edit this file!
  ;;; Make changes in README.org
#+end_src
*** Install [[https://github.com/slotThe/vc-use-package][vc-use-package]]
:INFO:
This package adds a key word ':vc' to 'use-package' so that we can have beautiful clean statements to install packages.
You don't need this with version 30 of Emacs so just comment this block if you are running 30.
:END:
#+begin_src elisp
  (unless (package-installed-p 'vc-use-package)
    (package-vc-install "https://github.com/slotThe/vc-use-package"))
  (require 'vc-use-package)

  (add-to-list 'package-archives '("gnu"   . "https://elpa.gnu.org/packages/"))
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
#+end_src
*** Useful Defaults
Just look how clean this is!
#+begin_src elisp
  (defconst emacs-tmp-dir (expand-file-name (format "emacs%d" (user-uid)) temporary-file-directory))

  (use-package emacs
    :ensure nil
    :commands (reload-config
	       sanemacs/backward-kill-word)
    :bind (("C-<" . indent-rigidly-right-to-tab-stop)
	   ("C->" . indent-rigidly-left-to-tab-stop)
	   ("C-DEL" . sanemacs/backward-kill-word)
	   ("M-DEL" . sanemacs/backward-kill-word))
    :custom ((inhibit-startup-screen t)
	     (initial-scratch-message "")
	     (use-short-answers t)
	     (ring-bell-function 'ignore)
	     (cursor-type 'bar)
	     (frame-title-format '("%b"))
	     (linum-format "%4d ")
	     (custom-file (expand-file-name "custom.el" user-emacs-directory))
	     (backup-by-copying t)
	     (delete-old-versions t)
	     (kept-new-versions 6)
	     (kept-old-versions 2)
	     (version-control t)
	     (auto-save-list-file-prefix emacs-tmp-dir)
	     (auto-save-file-name-transforms `((".*" ,emacs-tmp-dir t)))
	     (backup-directory-alist `((".*" . ,emacs-tmp-dir)))
	     (create-lockfiles nil)))
#+end_src
*** Custom file
Offload the custom-set-variables to a separate file
This keeps your init.el neater and you have the option
to gitignore your custom.el if you see fit.
#+begin_src elisp
  (unless (file-exists-p custom-file)
    (write-region "" nil custom-file))
#+end_src
*** Functions
**** Reload config
#+begin_src elisp
  (defun reload-config ()
    (interactive)
    (load-file (expand-file-name "init.el" user-emacs-directory)))
#+end_src
**** Backward kill word
#+begin_src elisp
  (defun sanemacs/backward-kill-word ()
  (interactive "*")
  (push-mark)
  (backward-word)
  (delete-region (point) (mark)))
#+end_src
*** Hooks
**** after init hook
#+begin_src elisp
  (add-hook 'after-init-hook #'visual-line-mode)
#+end_src
**** before save
#+begin_src elisp
  (add-hook 'before-save-hook
	    #'delete-trailing-whitespace)    ; Delete trailing
#+end_src
**** prog mode hook
#+begin_src elisp
  (add-hook 'prog-mode-hook
	    (if (or
		 (not (fboundp 'linum-mode))
		 (and (fboundp 'display-line-numbers-mode) (display-graphic-p)))
		#'display-line-numbers-mode
	      #'linum-mode))
#+end_src
** Packages
Because of recent advancements in Emacs we no longer need melpa we can have use-package do all the heavy lifting for us.
*** sane modules
:INFO:
SANE modules, are used for customizing options and loading configurations for Emacs packages. The code defines several customizable variables related to SANE modules, such as the base directory, module list, and configuration list. It also includes functions for expanding paths, finding config files, and loading modules. Here's a brief explanation of the code:

Variables
The code defines the following customizable variables for SANE modules:
- `sane-module-base-directory`: Base directory for SANE modules.
- `sane-module-module-list`: List of SANE modules to load.
- `sane-module-config-list`: List of SANE module configurations.

Functions
The code includes the following functions:
- `sane-modules-expand-paths`: Expands each symbol in the module list to a subdirectory path within the base directory and returns a list of valid paths.
- `sane-modules-find-config-files`: Finds 'config.el' files within each directory in the given list and returns a list of fully expanded file paths for the valid 'config.el' files.
- `sane-modules-load-files`: Loads files from the given file list, with an option to report the load time for each file.
- `sane-modules-load-modules`: Loads configuration files for modules in the module list under the base directory, with an option to report the load time for each file.

The code is designed to be used as part of Sanemacs, a minimal Emacs configuration framework that organizes packages, configurations, and commands into easily enable/disable units called modules.

The code can be used to customize and load configurations for Emacs packages, particularly within the context of Sanemacs and its module system.
:END:
#+begin_src elisp
  (setq lisp-dir (expand-file-name "lisp" user-emacs-directory))
  (setq sane-dir (concat lisp-dir "/sanemodules"))

  (add-to-list 'load-path lisp-dir)
  (add-to-list 'load-path sane-dir)

  (use-package sane-modules
    :ensure nil
    :load-path sane-dir
    :config
    (setq sane-module-base-directory (concat user-emacs-directory "modules/"))
    (setq sane-module-module-list '(;;; Sanemacs extended configuration
				    ;;; ui
				    ui/mct
				    ui/popper
				    ui/org-modern
				    ui/rainbow-mode
				    ui/ef-themes
				    ;;; tools
				    tools/edit-indirect
				    tools/emacs-dashboard
				    tools/expand-region
				    tools/helpful
				    tools/iedit
				    tools/magit
				    tools/vundo
				    tools/visual-regexp
				   )))
    (sane-modules-load-modules
     sane-module-base-directory
     sane-module-module-list t)
#+end_src
*** COMMENT Your changes could go here
Yes, you can continue adding to this file. it isn't really a bad idea. But you might want to break things up into modules and see if that makes your life easier.
Maybe, maybe not.
#+begin_src elisp
  Your changes might go here.
#+end_src
