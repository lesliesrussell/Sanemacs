#+STARTUP: show3levels
#+PROPERTY: header-args :tangle init.el

* Sanemacs
** Preamble
:PROPERTIES:
:Sanemacs version: 0.4.0
:END:


This is my personal config it has been sanitized and refactored a little. I was going to offer this as a pull req for the original Sanemacs which I have been using for years because it is great, but then I thought about it and realized that it doesn't really fit the Sanemacs ethos.

I'll leave this here because I think it has some value.


:INFO:
Stolen completely from Sanemacs because I like it as a base, but I made some changes.
- literate config
  It just makes everything so much cleaner, and deliberate. I can turn things off and on pretty easily.
- use-package for everything
  Because it is beautiful and takes a bit of the burdeon off me.
- vc is the package manager
  I went through several iterations (straight.el, elpaca, leaf) and I like them all. But my goal has always been to use as much Emacs out of the box as possible. So for me that means (org-mode, use-package, and now vc) since they are included. That means that if someone is running v 29 or greater this will work as a base config with maybe some effort.
- vc-use-package
  I needed this to make it easier for me to migrate to Emacs v30 when the time comes. I haven't tested this with 30 yet, but as far as I can tell vc-use-package is being rolled into Emacs v30 (or maybe into use-package) so I should just need to change one thing when the time comes.
- modules for configuration management
  Nothing even close to what you get with Doom Emacs or Spacemacs but it is good enough for me. I really just use modules to manage my extended config. It is pretty easy to understand, and might not be of much use honestly there is probably a better way. I was inspired by a package called [[https://github.com/SidharthArya/modular-config.el/tree/043907d96efff70dfaea1e721de90bd35970e8bd][modular-config]] and that may be a better way to go. I think it has more features and I really can't understand why more people don't use it.

All you need to do is be running Emacs v29 or better, clone the repo, install devour and run this command
    'devour emacs --init-directory=$(pwd) --debug-init'
to test the config out. Then if you like it just move it to ~/.config or symlink it, and run emacs the normal way.

Out of the box, this config uses ef-themes because they are gorgeous and well designed. I also use mct because I think it is better than any of the alternaves (fido, ido, vertico, etc.) because it is light on resources, extends Emacs rather than replaces, and it works kinda how I like to work. I have added denote to my personal version of things and I might add it as a module with a generic config.

And that's it, an 80 something line init.el, early-init.el is tiny too. Then you can go wild with packages. But if you are careful you can keep the load times slight.
:END:
** Early init
*** Header
#+begin_src elisp :tangle early-init.el
  ;;; Do not edit this file!
  ;;; Make changes in README.org
#+end_src
*** Turn on package statistics
Handy for keeping an eye on load times. You can turn it off if you like. But if you keep it, you can run 'use-package-report' to get a list of everything loaded and how long it took.
#+begin_src elisp :tangle early-init.el
  (setq use-package-compute-statistics t)
#+end_src
*** For performance
:INFO:
All this is taken directly from Sanemacs.
Code for optimizing the garbage collection threshold and the maximum amount of data to read from a process in Emacs. The `gc-cons-threshold` variable sets the threshold for garbage collection, and the `read-process-output-max` variable sets the maximum amount of data to read from a process. Here's a breakdown of the code:

- The first line sets the `gc-cons-threshold` to 100,000,000, which means the garbage collection will be triggered after allocating this amount of memory.
- The second line sets the `read-process-output-max` to 1,048,576 bytes, which is 1MB.
- The `add-hook` function adds a hook to run the given function after Emacs has finished initializing. In this case, it sets the `gc-cons-threshold` to 800,000 after initialization.

The `gc-cons-threshold` is the number of bytes of memory allocation before a garbage collection is invoked. Setting it to a higher value can improve performance during startup, but it may lead to longer pauses during regular use[4]. The `read-process-output-max` variable sets the maximum amount of data to read from a process, and increasing it can be useful for improving the performance of certain Emacs packages.
:END:
#+begin_src elisp :tangle early-init.el
  (setq gc-cons-threshold 100000000)
  (setq read-process-output-max (* 1024 1024)) ;; 1mb

  (add-hook 'after-init-hook #'(lambda ()
				 ;; restore after startup
				 (setq gc-cons-threshold 800000)))
#+end_src
*** Disable menu-bar, tool-bar, and scroll-bar
#+begin_src elisp :tangle early-init.el
  (if (fboundp 'menu-bar-mode)
      (menu-bar-mode -1))
  (if (fboundp 'tool-bar-mode)
      (tool-bar-mode -1))
  (if (fboundp 'scroll-bar-mode)
      (scroll-bar-mode -1))
#+end_src
*** Theme
#+begin_src elisp :tangle early-init.el
  ;; (if (not custom-enabled-themes)
  ;;     (load-theme 'wheatgrass t))
    (if (not custom-enabled-themes)
      (load-theme 'leuven-dark t))
#+end_src
*** COMMENT Fix [[https://www.reddit.com/r/emacs/comments/cueoug/the_failed_to_download_gnu_archive_is_a_pretty/][bug]]
:INFO:

I am not 100% sure this is required anymore, I've tested with and without and no change. I have it commented so that it will not tangle. If you need it it is here.

:END:
#+begin_src elisp :tangle early-init.el
  (when (version< emacs-version "26.3")
    (setq gnutls-algorithm-priority "NORMAL:-VERS-TLS1.3"))
#+end_src
** Init
*** Header
#+begin_src elisp
  ;;; Do not edit this file!
  ;;; Make changes in README.org
#+end_src
*** Install [[https://github.com/slotThe/vc-use-package][vc-use-package]]
:INFO:
This package adds a key word ':vc' to 'use-package' so that we can have beautiful clean statements to install packages.
You don't need this with version 30 of Emacs so just comment this block if you are running 30.
:END:
#+begin_src elisp
  (unless (package-installed-p 'vc-use-package)
    (package-vc-install "https://github.com/slotThe/vc-use-package"))
  (require 'vc-use-package)

  (add-to-list 'package-archives '("gnu"   . "https://elpa.gnu.org/packages/"))
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
#+end_src
*** Useful Defaults
Just look how clean this is!
#+begin_src elisp
  (defconst emacs-tmp-dir (expand-file-name (format "emacs%d" (user-uid)) temporary-file-directory))

  (use-package emacs
    :ensure nil
    :commands (reload-config
	       sanemacs/backward-kill-word)
    :bind (("C-<" . indent-rigidly-right-to-tab-stop)
	   ("C->" . indent-rigidly-left-to-tab-stop)
	   ("C-x C-b" . ibuffer))
    :custom ((inhibit-startup-screen t)
	     (initial-scratch-message "")
	     (use-short-answers t)
	     (ring-bell-function 'ignore)
	     (cursor-type 'bar)
	     (frame-title-format '("%b"))
	     (linum-format "%4d ")
	     (custom-file (expand-file-name "custom.el" user-emacs-directory))
	     (backup-by-copying t)
	     (delete-old-versions t)
	     (kept-new-versions 6)
	     (kept-old-versions 2)
	     (version-control t)
	     (auto-save-list-file-prefix emacs-tmp-dir)
	     (auto-save-file-name-transforms `((".*" ,emacs-tmp-dir t)))
	     (backup-directory-alist `((".*" . ,emacs-tmp-dir)))
	     (create-lockfiles nil)))
#+end_src
*** Custom file
Offload the custom-set-variables to a separate file
This keeps your init.el neater and you have the option
to gitignore your custom.el if you see fit.
#+begin_src elisp
  (unless (file-exists-p custom-file)
    (write-region "" nil custom-file))
#+end_src
*** Functions
**** Reload config
#+begin_src elisp
  (defun reload-config ()
    (interactive)
    (load-file (expand-file-name "init.el" user-emacs-directory)))
#+end_src
**** COMMENT Backward kill word
I don't use this. But left it incase.
#+begin_src elisp
  (defun sanemacs/backward-kill-word ()
  (interactive "*")
  (push-mark)
  (backward-word)
  (delete-region (point) (mark)))
#+end_src
**** DONE COMMENT search and iedit :move:
This needs to be moved into the iedit module
#+begin_src elisp
  (defun search-and-start-iedit (search-term)
    "Search for SEARCH-TERM and start iedit-mode on its occurrences."
    (interactive "sEnter search term: ")
    (let ((case-fold-search t)) ; Set this to nil if you want case-sensitive search
      (goto-char (point-min))   ; Start from the beginning of the buffer
      (search-forward search-term nil t)
      (backward-word)
      (iedit-mode)))          ; Activate iedit-mode on the current occurrence
#+end_src
**** kill thing at point with examples
#+begin_src elisp
  (defun kill-and-replace-thing-at-point (thing)
  "Kill the THING at point and prepare for replacement."
  (let ((bounds (bounds-of-thing-at-point thing)))
    (when bounds
      (kill-region (car bounds) (cdr bounds)))))

;; Usage example:
;; (kill-and-replace-thing-at-point 'word)  ; Kills the word at point
;; (global-set-key (kbd "C-c k") (lambda () (interactive) (kill-and-replace-thing-at-point 'word)))
#+end_src
**** TODO vc-git stuff
At some point all this will be a package of a module.
You know I might need to change the modules thing so that it just loads packages.
The modules thing was fun to play with but the more I think of it the more I realize it
is overkill. use-package does it all I just need to figure out a way to handle the management.
***** git clone
#+begin_src elisp
  ;; -*- lexical-binding: t -*-

  (defun git-clone-clipboard-url ()
    "Clone git URL in clipboard asynchronously and open in dired when finished."
    (interactive)
    (cl-assert (string-match-p "^\\(http\\|https\\|ssh\\)://" (current-kill 0)) nil "No URL in clipboard")
    (let* ((url (current-kill 0))
	   (download-dir (expand-file-name "~/Downloads/"))
	   (project-dir (concat (file-name-as-directory download-dir)
				(file-name-base url)))
	   (default-directory download-dir)
	   (command (format "git clone %s" url))
	   (buffer (generate-new-buffer (format "*%s*" command)))
	   (proc))
      (when (file-exists-p project-dir)
	(if (y-or-n-p (format "%s exists. delete?" (file-name-base url)))
	    (delete-directory project-dir t)
	  (user-error "Bailed")))
      (switch-to-buffer buffer)
      (setq proc (start-process-shell-command (nth 0 (split-string command)) buffer command))
      (with-current-buffer buffer
	(setq default-directory download-dir)
	(shell-command-save-pos-or-erase)
	(require 'shell)
	(shell-mode)
	(view-mode +1))
      (set-process-sentinel proc (lambda (process state)
				   (let ((output (with-current-buffer (process-buffer process)
						   (buffer-string))))
				     (kill-buffer (process-buffer process))
				     (if (= (process-exit-status process) 0)
					 (progn
					   (message "finished: %s" command)
					   (dired project-dir))
				       (user-error (format "%s\n%s" command output))))))
      (set-process-filter proc #'comint-output-filter)))
#+end_src
***** git status
So the fact of it is that ~vc-dir~ is better and I might just alias that
#+begin_src elisp
  (defun vc-git-status ()
    "Run git status on the current directory and display the results."
    (interactive)
    (shell-command "git status"))

  (global-set-key (kbd "C-x v .") #'vc-git-status)
#+end_src
*** Hooks
**** after init hook
#+begin_src elisp
  (add-hook 'after-init-hook #'global-visual-line-mode)
#+end_src
**** before save
#+begin_src elisp
  (add-hook 'before-save-hook
	    #'delete-trailing-whitespace)    ; Delete trailing
#+end_src
**** prog mode hook
#+begin_src elisp
  (add-hook 'prog-mode-hook
	    (if (or
		 (not (fboundp 'linum-mode))
		 (and (fboundp 'display-line-numbers-mode) (display-graphic-p)))
		#'display-line-numbers-mode
	      #'linum-mode))
#+end_src
** Packages
*** sane modules
At this point, the only reason I am keeping this is for organization.
:INFO:
SANE modules, are used for customizing options and loading configurations for Emacs packages. The code defines several customizable variables related to SANE modules, such as the base directory, module list, and configuration list. It also includes functions for expanding paths, finding config files, and loading modules. Here's a brief explanation of the code:

Variables
The code defines the following customizable variables for SANE modules:
- `sane-module-base-directory`: Base directory for SANE modules.
- `sane-module-module-list`: List of SANE modules to load.
- `sane-module-config-list`: List of SANE module configurations.

Functions
The code includes the following functions:
- `sane-modules-expand-paths`: Expands each symbol in the module list to a subdirectory path within the base directory and returns a list of valid paths.
- `sane-modules-find-config-files`: Finds 'config.el' files within each directory in the given list and returns a list of fully expanded file paths for the valid 'config.el' files.
- `sane-modules-load-files`: Loads files from the given file list, with an option to report the load time for each file.
- `sane-modules-load-modules`: Loads configuration files for modules in the module list under the base directory, with an option to report the load time for each file.

The code is designed to be used as part of Sanemacs, a minimal Emacs configuration framework that organizes packages, configurations, and commands into easily enable/disable units called modules.

The code can be used to customize and load configurations for Emacs packages, particularly within the context of Sanemacs and its module system.
:END:
#+begin_src elisp
  (setq lisp-dir (expand-file-name "lisp" user-emacs-directory))
  (setq sane-dir (concat lisp-dir "/sanemodules"))

  (add-to-list 'load-path lisp-dir)
  (add-to-list 'load-path sane-dir)

  (use-package sane-modules
    :ensure nil
    :load-path sane-dir
    :config
    (setq sane-module-base-directory (concat user-emacs-directory "modules/"))
    (setq sane-module-module-list '(;;; Sanemaces extended configuration
				    ;;; ui
				    ui/mct
				    ui/popper
				    ui/org-modern
				    ui/rainbow-mode
				    ;; ui/sane-mode
				    ;; ui/ef-themes
				    ui/golden
				    ;;; tools
				    tools/edit-indirect
				    ;; tools/emacs-dashboard
				    tools/expand-region
				    tools/helpful
				    tools/iedit
				    tools/hydra
				    tools/magit
				    tools/vundo
				    tools/visual-regexp
				    tools/denote
				    tools/active-region
				    tools/perspective
				    ;;; prose
				    writing/fountain
				    writing/darkroom
				    ;;; testing
				    testing/embark
				   )))
    (sane-modules-load-modules
     sane-module-base-directory
     sane-module-module-list t)
#+end_src
*** COMMENT Your changes could go here
Yes, you can continue adding to this file. it isn't really a bad idea. But you might want to break things up into modules and see if that makes your life easier.
Maybe, maybe not.
#+begin_src elisp
  Your changes might go here.
#+end_src
